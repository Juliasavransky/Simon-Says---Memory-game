{"version":3,"sources":["components/Score.jsx","components/PanelCenter.jsx","components/PanelBottomRight.jsx","components/PanelBottomLeft.jsx","components/PanelTopLeft.jsx","components/PanelTpoRight.jsx","utils/timeout.js","utils/localStorageHook.js","sounds/gameOver.wav","sounds/game-start.wav","sounds/simonRGBY.mp3","App.js","reportWebVitals.js","index.js"],"names":["Score","lastScore","highest","currentScore","className","PanelCenter","startHandle","stage","level","onClick","PanelBottomRight","active","userChoice","PanelBottomLeft","PanelTopLeft","PanelTpoRight","timeout","ms","Promise","resolve","setTimeout","useLocalStorageState","localItem","useState","localStorage","getItem","loc","setState","newItem","setItem","App","gameOn","setGameOn","setStage","simonPlays","setSimonPlays","taskSequence","setTaskSequence","setLevel","setActive","activeAll","setActiveAll","userPlays","setUserPlays","userSequence","setUserSequence","userlost","setUserLost","setcurrentScore","setlastScore","setHighest","colors","useSound","gameStart","volume","playGameStart","useEffect","gameOver","playGameOver","gameSounds","sprite","red","blue","green","yellow","playGameSound","a","highestScore","i","length","id","copyTaskSequence","reverse","userTurn","copyUserSequence","lastColor","pop","activeAllColors","newColor","Math","floor","random","newTaskSequence","flashingColors","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b871b89a.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\n\r\nconst Score = ({ lastScore, highest, currentScore }) => {\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"scoreContainer\">\r\n\r\n                <div className=\"score\">Current Score\r\n                    <div>{currentScore}</div>\r\n                </div>\r\n\r\n                <div className=\"score\">Last Score\r\n                    <div>{lastScore}</div>\r\n                </div>\r\n\r\n                <div className=\"score\">Highest Score\r\n                    <div>{highest}</div>\r\n                </div>\r\n\r\n\r\n            </div>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Score;","import React, { Fragment } from 'react';\r\n\r\nconst PanelCenter = ({\r\n    startHandle,\r\n    stage,\r\n    level,\r\n\r\n}) => {\r\n\r\n    return (\r\n        <Fragment>\r\n            <button onClick={startHandle} className=\"center\">\r\n                <div>\r\n                    <h1>{stage}</h1>\r\n\r\n                    <h4>{level === 0\r\n                        ? \"\"\r\n                        : level}</h4>\r\n                </div>\r\n            </button>\r\n        </Fragment>\r\n\r\n    );\r\n}\r\n\r\nexport default PanelCenter;","import React from 'react'\r\n\r\nconst PanelBottomRight = ({ active, userChoice }) => {\r\n\r\n    return (\r\n            <button\r\n                onClick={() => userChoice(\"green\")}\r\n                className={`panel bottom-right ${active ? \"greenActive\" : \"\"}`}>\r\n            </button>\r\n    )\r\n}\r\n\r\nexport default PanelBottomRight\r\n\r\n","import React from 'react';\r\n\r\nconst PanelBottomLeft = ({ active, userChoice }) => {\r\n\r\n    return (\r\n        <button\r\n            onClick={() => userChoice(\"yellow\")}\r\n            className={`panel bottom-left ${active ? \"yellowActive\" : \"\"}`}\r\n        >\r\n        </button>\r\n\r\n    )\r\n}\r\n\r\nexport default PanelBottomLeft\r\n","import React from 'react';\r\n\r\nconst PanelTopLeft = ({ active, userChoice }) => {\r\n\r\n    return (\r\n            <button\r\n                onClick={() => userChoice(\"blue\")}\r\n                className={`panel top-left ${active ? \"blueActive\" : \"\"}`}\r\n            ></button>\r\n\r\n    );\r\n}\r\n\r\nexport default PanelTopLeft;","import React from 'react'\r\n\r\nconst PanelTpoRight = ({ active, userChoice }) => {\r\n\r\n    return (\r\n        \r\n        <button\r\n            onClick={() => userChoice(\"red\")}\r\n            className={`panel top-right ${active ? \"redActive\" : \"\"}`}>\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default PanelTpoRight\r\n","export default function timeout(ms){\r\n    return new Promise(resolve=>setTimeout(resolve,ms))\r\n}","import {useState} from 'react';\r\n\r\nexport function useLocalStorageState(localItem) {\r\n    const [loc, setState] = useState(localStorage.getItem(localItem));\r\n\r\n    function setLoc(newItem) {\r\n        localStorage.setItem(localItem, newItem); \r\n            setState(newItem);\r\n        \r\n    }\r\n\r\n    return [loc, setLoc];\r\n}","export default __webpack_public_path__ + \"static/media/gameOver.ded355b3.wav\";","export default __webpack_public_path__ + \"static/media/game-start.ba70f39e.wav\";","export default __webpack_public_path__ + \"static/media/simonRGBY.5cc7d325.mp3\";","import React, { useState, useEffect, Fragment, } from 'react';\nimport useSound from 'use-sound';\nimport './App.css';\nimport Score from './components/Score';\nimport PanelCenter from './components/PanelCenter';\nimport PanelBottomRight from './components/PanelBottomRight';\nimport PanelBottomLeft from './components/PanelBottomLeft';\nimport PanelTopLeft from './components/PanelTopLeft';\nimport PanelTpoRight from './components/PanelTpoRight';\nimport timeout from './utils/timeout';\nimport { useLocalStorageState } from './utils/localStorageHook';\nimport gameOver from './sounds/gameOver.wav';\nimport gameStart from './sounds/game-start.wav';\nimport gameSounds from './sounds/simonRGBY.mp3';\n\n\nconst App = () => {\n  const [gameOn, setGameOn] = useState(false);  // whether the game is on/off\n  const [stage, setStage] = useState(\"Start\");  // the display text of the center\n\n  const [simonPlays, setSimonPlays] = useState(false);  //turn true when Simon plays\n  const [taskSequence, setTaskSequence] = useState([]); //array for random sequence of the game\n\n  const [level, setLevel] = useState(0);  // taskSequence.lenght\n  const [active, setActive] = useState(\"\"); // the color which is flashing\n  const [activeAll, setActiveAll] = useState(false);  // when all the colors are flashing when the game starts\n\n  const [userPlays, setUserPlays] = useState(false);  //turn true when user plays\n  const [userSequence, setUserSequence] = useState([]); //the sequence the user enters\n\n  const [userlost, setUserLost] = useState(false);  //turn true when user loses\n\n  const [currentScore, setcurrentScore] = useState(0);  //current game score\n  const [lastScore, setlastScore] = useLocalStorageState(\"last-game\", 0);  // local Storage custom Hook\n  const [highest, setHighest] = useLocalStorageState(\"highest-score\", 0);  //local Storage custom Hook\n\n\n\n  const colors = [\"blue\", \"red\", \"green\", \"yellow\"];\n\n  //playing the game start sound\n  const [playGameStart] = useSound(gameStart, { volume: .4 });\n  useEffect(() => {\n    if (gameOn) {\n      playGameStart();\n    }\n  }, [gameOn]);\n\n  //playing the game over sound\n  const [playGameOver] = useSound(gameOver, { volume: .4 });\n  useEffect(() => {\n    if (userlost) {\n      playGameOver();\n    }\n  }, [userlost]);\n\n  const [playGameSound] = useSound(gameSounds,\n    {\n      sprite: {\n        red: [0, 500],\n        blue: [1270, 400],\n        green: [675, 455],\n        yellow: [1900, 415]\n      }\n    }, { volume: .4 });\n\n  const startHandle = () => {\n    setGameOn(true);\n  };\n\n  async function activeAllColors() {\n    if (gameOn) {\n      setStage(\"Ready\");\n      setActiveAll(true);\n      await timeout(800);\n      setActiveAll(false);\n      setcurrentScore(0)\n\n    }\n  };\n\n  // finding the highest score \n  const highestScore = () => {\n    if (currentScore > highest) {\n      setHighest(currentScore)\n    }\n\n  }\n\n  // starting the game\n  useEffect(() => {\n    if (gameOn) {\n      activeAllColors();\n      setSimonPlays(true);\n      setLevel((taskSequence.length) + 1);\n    }\n  }, [gameOn]);\n\n  //array of Simon's sequence\n  useEffect(() => {\n    if (gameOn && simonPlays) {\n      let newColor = colors[Math.floor(Math.random() * 4)];\n\n      const newTaskSequence = [...taskSequence, newColor];\n      setTaskSequence(newTaskSequence);\n    }\n  }, [gameOn, simonPlays]);\n\n  //flashing the colors\n  useEffect(() => {\n    if (gameOn && simonPlays && taskSequence.length) {\n      flashingColors();\n    }\n  }, [gameOn && simonPlays && taskSequence.length]);\n\n\n  async function flashingColors() {\n    await timeout(1500);\n    setStage(\"Simon Says\");\n\n    for (let i = 0; i < taskSequence.length; i++) {\n\n      setActive(taskSequence[i]);\n      playGameSound({ id: taskSequence[i] });\n      await timeout(300);\n      setActive(\"\");\n      await timeout(300);\n\n      if (i === taskSequence.length - 1) {\n        //copy the colors array for the user in reversed order\n        const copyTaskSequence = [...taskSequence].reverse();\n\n        setSimonPlays(false);\n        await timeout(300);\n        setUserPlays(true);\n        setStage(\"Your turn\");\n        setUserSequence(copyTaskSequence);\n\n      };\n    }\n  }\n\n  //user's turn to play\n  async function userTurn(userChoice) {\n    if (!simonPlays && userPlays) {\n\n      const copyUserSequence = [...userSequence];\n      const lastColor = copyUserSequence.pop(); //cutting from the end\n      setActive(userChoice);\n      playGameSound({ id: userChoice });\n\n      if (userChoice === lastColor) { //if the user succeeds\n\n        if (copyUserSequence.length) {\n          setUserSequence(copyUserSequence);\n\n        } else {  //level up\n          await timeout(1000);\n          setStage(\"Simon Says\");\n          setSimonPlays(true);\n          setLevel((taskSequence.length) + 1);\n          setcurrentScore(level * 10)\n          setUserPlays(false);\n          setUserSequence([]);\n        }\n\n      } else {  // user loses \n        await timeout(500);\n        setGameOn(false)\n        setActive(\"\");\n        setUserPlays(false);\n        setUserSequence([]);\n        setTaskSequence([]);\n        setUserLost(true);\n        highestScore();\n        setlastScore((level - 1) * 10);\n        setLevel(0);\n        setStage(\"I'm sorry\");\n        await timeout(2000);\n        setStage(\"Game Over\");\n        await timeout(2000);\n        setStage(\"Start\");\n        setUserLost(false);\n      }\n\n      await timeout(1000);\n      setActive(\"\");\n    }\n  }\n\n  return (\n    <Fragment >\n      <div className=\"simonContainer\">\n\n        <PanelTopLeft\n          userChoice={userTurn}\n          active={activeAll || active === \"blue\"}\n        />\n        <PanelTpoRight\n          userChoice={userTurn}\n          active={activeAll || active === \"red\"}\n\n        />\n        <PanelBottomLeft\n          userChoice={userTurn}\n          active={activeAll || active === \"yellow\"}\n\n        />\n        <PanelBottomRight\n          userChoice={userTurn}\n          active={activeAll || active === \"green\"}\n\n        />\n\n        <PanelCenter\n          startHandle={startHandle}\n          stage={stage}\n          level={level}\n        />\n\n      </div>\n      <Score\n        lastScore={lastScore}\n        highest={highest}\n        currentScore={currentScore}\n      />\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}